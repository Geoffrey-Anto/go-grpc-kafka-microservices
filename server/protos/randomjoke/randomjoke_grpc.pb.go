// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/randomjoke.proto

package randomjoke

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RandomJokeService_GetRandomJoke_FullMethodName = "/RandomJokeService/GetRandomJoke"
)

// RandomJokeServiceClient is the client API for RandomJokeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomJokeServiceClient interface {
	GetRandomJoke(ctx context.Context, in *RandomJokeRequest, opts ...grpc.CallOption) (RandomJokeService_GetRandomJokeClient, error)
}

type randomJokeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomJokeServiceClient(cc grpc.ClientConnInterface) RandomJokeServiceClient {
	return &randomJokeServiceClient{cc}
}

func (c *randomJokeServiceClient) GetRandomJoke(ctx context.Context, in *RandomJokeRequest, opts ...grpc.CallOption) (RandomJokeService_GetRandomJokeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomJokeService_ServiceDesc.Streams[0], RandomJokeService_GetRandomJoke_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &randomJokeServiceGetRandomJokeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomJokeService_GetRandomJokeClient interface {
	Recv() (*RandomJokeResponse, error)
	grpc.ClientStream
}

type randomJokeServiceGetRandomJokeClient struct {
	grpc.ClientStream
}

func (x *randomJokeServiceGetRandomJokeClient) Recv() (*RandomJokeResponse, error) {
	m := new(RandomJokeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomJokeServiceServer is the server API for RandomJokeService service.
// All implementations must embed UnimplementedRandomJokeServiceServer
// for forward compatibility
type RandomJokeServiceServer interface {
	GetRandomJoke(*RandomJokeRequest, RandomJokeService_GetRandomJokeServer) error
	mustEmbedUnimplementedRandomJokeServiceServer()
}

// UnimplementedRandomJokeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRandomJokeServiceServer struct {
}

func (UnimplementedRandomJokeServiceServer) GetRandomJoke(*RandomJokeRequest, RandomJokeService_GetRandomJokeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRandomJoke not implemented")
}
func (UnimplementedRandomJokeServiceServer) mustEmbedUnimplementedRandomJokeServiceServer() {}

// UnsafeRandomJokeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomJokeServiceServer will
// result in compilation errors.
type UnsafeRandomJokeServiceServer interface {
	mustEmbedUnimplementedRandomJokeServiceServer()
}

func RegisterRandomJokeServiceServer(s grpc.ServiceRegistrar, srv RandomJokeServiceServer) {
	s.RegisterService(&RandomJokeService_ServiceDesc, srv)
}

func _RandomJokeService_GetRandomJoke_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomJokeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomJokeServiceServer).GetRandomJoke(m, &randomJokeServiceGetRandomJokeServer{stream})
}

type RandomJokeService_GetRandomJokeServer interface {
	Send(*RandomJokeResponse) error
	grpc.ServerStream
}

type randomJokeServiceGetRandomJokeServer struct {
	grpc.ServerStream
}

func (x *randomJokeServiceGetRandomJokeServer) Send(m *RandomJokeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RandomJokeService_ServiceDesc is the grpc.ServiceDesc for RandomJokeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomJokeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RandomJokeService",
	HandlerType: (*RandomJokeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomJoke",
			Handler:       _RandomJokeService_GetRandomJoke_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/randomjoke.proto",
}
